  Token: escrowDetails.token
});
  Token: escrowDetails.token
  Status: ["Pending","Funded","Released","Refunded","Disputed"][escrowDetails.status],
  Amount: ethers.formatEther(escrowDetails.amount),
  Counterparty: escrowDetails.counterparty,
  Initiator: escrowDetails.initiator,
console.log({
// View details
const 
// Check escrow status
const escrowId = receipt.logs[0].topics[1];
// Get escrow ID
const receipt = await createTx.wait();
// Wait for confirmation
);
  "Release conditions"
  "Test terms",
  ethers.parseEther("1.0"),
  "0x1e0125b823dcDE430578068532E2dc400c56Fa82",
const createTx =   "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
// Create escrow
E9f3c7fa6e0");
const Escrow = await etheconst escrow = await Escrow.attach("0x9fE46736679d2D9a65F0992F2272d
// Get contract instance
.exit
});
  ReleaseConditions: escrowDetails.releaseConditions
  Terms: escrowDetails.terms,
  Token: escrowDetails.token,
  Status: ["Pending", "Funded", "Released", "Refunded", "Disputed"][escrowDetails.status],
  Amount: ethers.formatEther(escrowDetails.amount) + " tokens",
  Counterparty: escrowDetails.counterparty,
  Initiator: escrowDetails.initiator,
console.log("Escrow Details:", {
// 6. Print formatted details
const escrowDetails = await escrow.transactions(escrowId);
// 5. Now you can check the escrow status
const escrowId = receipt.logs[0].topics[1];
// 4. Get the escrow ID from event logs
const receipt = await createTx.wait();
// 3. Wait for transaction confirmation (this is crucial)
);
  "Release conditions"
  "Test terms", 
  ethers.parseEther("1.0"), // amount (1.0 token)
3dcDE430578068532E2dc400c56Fa82", // token
  "0x1e0125b82
  "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", // counterparty
const createTx = await escrow.createEscrow(
// 2. Create a new escrow (with await to get the transaction response)
const escrow = await Escrow.attach("0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6
const Escrow = await ethers.getContractFactory("Escrow");
// 1. First get the contract instance again to ensure clean state
.exit
const txIdBytes32 = txReceipt.logs[0].topics[1]; // Get the escrow ID from event logs
console.log("Escrow status:", await escrow.transactions(txId));
// Check escrow status
);
  "Release conditions"
  "Test terms", 
  ethers.parseEther("1.0"), // amount (1.0 token)
  "0x1e0125b823dcDE430578068532E2dc400c56Fa82", // token
  "0x70997970C51812dc3A010C7d01b50e0d17dc79C8", // counterparty
const txId = await escrow.createEscrow(
// Create a test escrow
clear
console.log("Platform Fee:", await escrow.platformFee());
con
console.log("Platform Token:", await escrow.platformToken());
console.log("Admin:", await escrow.admin());
const escrow = await Escrow.attach("0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0");
const Escrow = await ethers.getContractFactory("Escrow");